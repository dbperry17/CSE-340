#!/usr/bin/python
import argparse
import os
from string import Template
from datetime import datetime


MAKEFILE_TEMPLATE = Template("""
# Automatically generated on ${date}

DEP = .deps
CC  = gcc
CXX = g++
CFLAGS   = ${common_flags} ${c_flags}
CXXFLAGS = ${common_flags} ${cpp_flags}

# Target
SOURCES  = ${sources}
OBJECTS  = ${objects}
DEPFILES = $$(patsubst %.o,$$(DEP)/%.d,$$(OBJECTS))
TARGET   = ${binary_name}
ZIP_FILE = ${zip_file_name}

.PHONY: all clean zip

all: $$(DEP) $$(TARGET)

-include $$(DEPFILES)

$$(TARGET): $$(OBJECTS)
	@echo "Linking $$@"
	${linker} $$(OBJECTS) -o $$@ $$(LIBS)

%.o: %.c
	@echo "Compiling $$*.c"
	$$(CC) -c $$(CFLAGS) $$*.c $$(INCLUDE) -o $$@
	@$$(CC) -MM -MP -MT $$@ $$(CFLAGS) $$*.c $$(INCLUDE) > $$(DEP)/$$*.d

%.o: %.cpp
	@echo "Compiling $$*.cpp"
	$$(CXX) -c $$(CXXFLAGS) $$*.cpp $$(INCLUDE) -o $$@
	@$$(CXX) -MM -MP -MT $$@ $$(CXXFLAGS) $$*.cpp $$(INCLUDE) > $$(DEP)/$$*.d

%.o: %.cc
	@echo "Compiling $$*.cc"
	$$(CXX) -c $$(CXXFLAGS) $$*.cc $$(INCLUDE) -o $$@
	@$$(CXX) -MM -MP -MT $$@ $$(CXXFLAGS) $$*.cc $$(INCLUDE) > $$(DEP)/$$*.d

$$(DEP):
	@mkdir -p $$@

zip: $$(SOURCES)
	@echo "Zipping source files to $$(ZIP_FILE)"
	@zip $$(ZIP_FILE) Makefile $$(SOURCES) ${header_files}

clean:
	@rm -f $$(TARGET) $$(DEPFILES) $$(OBJECTS) $$(ZIP_FILE)
	@rmdir $$(DEP)
""")


def _now():
    return datetime.now().strftime("%a, %b %d %Y %H:%M:%S")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Creates a nice Makefile')
    parser.add_argument("source_file", nargs='+',
                        help="a source or header file e.g. test.c")
    parser.add_argument("-c", "--compile_flags", default='-Wall',
                        help="compile flags passed on to gcc and g++")
    parser.add_argument("--c_flags", default='',
                        help="compile flags specific to C code")
    parser.add_argument("--cpp_flags", default='',
                        help="compile flags specific to C++ code")
    parser.add_argument("-b", "--binary_name", default='a.out',
                        help="the name of the executable e.g. a.out")
    parser.add_argument("-z", "--zip_file_name", default='source.zip',
                        help="the name of the zip file generated by make zip")
    args = parser.parse_args()
    extensions = [os.path.splitext(f)[1].lower() for f in args.source_file]
    if ".cpp" in extensions or ".cc" in extensions:
        linker = "$(CXX)"
    else:
        linker = "$(CC)"
    source_files = [f for f in args.source_file if f.endswith((".c", ".cc", ".cpp"))]
    header_files = [f for f in args.source_file if f.endswith((".h", ".hpp"))]
    output = MAKEFILE_TEMPLATE.substitute(
        date=_now(),
        common_flags=args.compile_flags,
        c_flags=args.c_flags,
        cpp_flags=args.cpp_flags,
        sources=' '.join(source_files),
        objects=' '.join([os.path.splitext(f)[0] + '.o' for f in source_files]),
        binary_name=args.binary_name,
        zip_file_name=args.zip_file_name,
        header_files=' '.join(header_files),
        linker=linker,
    )
    print(output)
